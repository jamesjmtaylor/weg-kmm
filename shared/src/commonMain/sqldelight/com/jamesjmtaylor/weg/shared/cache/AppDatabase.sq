import kotlin.collections.List;

-- SEARCH RESULTS

CREATE TABLE search_result (
equipment_id INTEGER NOT NULL PRIMARY KEY,
title TEXT,
categories TEXT,
page INTEGER
);

insertResult:
INSERT OR REPLACE INTO search_result(title, equipment_id, categories, page)
VALUES(?,?,?, ?);

selectResultByEquipmentId:
SELECT search_result.*, image.*
FROM search_result
LEFT JOIN image ON image.equipment_id == search_result.equipment_id
WHERE search_result.equipment_id = ?;

selectResultByPage:
SELECT search_result.*, image.*
FROM search_result
LEFT JOIN image ON image.equipment_id == search_result.equipment_id
WHERE page = ?;

selectAllSearchResults:
SELECT search_result.*, image.*
FROM search_result
LEFT JOIN image ON image.equipment_id == search_result.equipment_id;

removeAllResults:
DELETE FROM search_result;

-- IMAGES

CREATE TABLE image (
equipment_id INTEGER NOT NULL,
name TEXT,
url TEXT
);

insertImage:
INSERT OR REPLACE INTO image(equipment_id, name, url)
VALUES(?,?,?);

selectImagesByEquipmentId:
SELECT * FROM image
WHERE equipment_id = ?;

removeAllImages:
DELETE FROM image;

-- DETAILS

CREATE TABLE search_result_details (
equipment_id INTEGER PRIMARY KEY NOT NULL,
tiers TEXT,
notes TEXT,
date_of_introduction TEXT,
country_of_origin TEXT,
proliferation TEXT
);

insertSearchResultDetails:
INSERT OR REPLACE INTO search_result_details(equipment_id, tiers, notes, date_of_introduction, country_of_origin, proliferation)
VALUES(?,?,?,?,?,?);

selectEquipmentDetailsByEquipmentId:
SELECT d.*, v.*
FROM search_result_details d
JOIN search_results_variants v
ON v.equipment_id == d.equipment_id
WHERE d.equipment_id = ?;

removeAllEquipmentDetails:
DELETE FROM search_result_details;

-- VARIANTS

CREATE TABLE search_results_variants (
equipment_id INTEGER NOT NULL,
variant_name TEXT,
variant_notes TEXT,
FOREIGN KEY (equipment_id) REFERENCES search_result_details (equipment_id)
);

insertSearchResultVariants:
INSERT OR REPLACE INTO search_results_variants(equipment_id, variant_name, variant_notes)
VALUES(?,?,?);

removeAllSearchResultVariants:
DELETE FROM search_results_variants;

-- SECTIONS

CREATE TABLE search_results_sections (
id INTEGER PRIMARY KEY AUTOINCREMENT,
equipment_id INTEGER NOT NULL,
parent_section_id INTEGER,
section_name TEXT
);

insertSearchResultSections:
INSERT OR REPLACE INTO search_results_sections(equipment_id, parent_section_id, section_name)
VALUES(?,?,?);

selectSearchResultSectionsByEquipmentId:
SELECT * FROM search_results_variants
WHERE equipment_id = ?;

removeAllSearchResultSections:
DELETE FROM search_results_sections;

-- PROPERTIES

CREATE TABLE search_results_properties (
section_id INTEGER NOT NULL,
properties_name TEXT,
properties_value TEXT,
properties_unit TEXT,
FOREIGN KEY (section_id) REFERENCES search_results_sections (id)
);

insertSearchResultProperties:
INSERT OR REPLACE INTO search_results_properties(properties_name, properties_value, properties_unit, section_id)
VALUES(?,?,?,?);

removeAllSearchResultProperties:
DELETE FROM search_results_properties;






